name: Deploy  Next.js MFE to Vercel

on:
  push:
    branches: [main]
  pull_request:
  workflow_dispatch:
    inputs:
      target:
        description: 'Deploy target (preview or production)'
        required: false
        default: 'preview'
        type: choice
        options:
          - preview
          - production

jobs:
  deploy_home:
    name: Deploy Home
    runs-on: ubuntu-latest
    outputs:
      home_url: ${{ steps.set_url.outputs.url }}
    steps:
      - name: Checkout (with submodules)
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0

      - name: Force Vercel git author to trusted account
        run: |
          echo "VERCEL_GIT_COMMIT_AUTHOR_LOGIN=${{ github.repository_owner }}" >> $GITHUB_ENV
          echo "VERCEL_GIT_COMMIT_AUTHOR_NAME=${{ github.repository_owner }} (via GitHub Actions)" >> $GITHUB_ENV
          echo "VERCEL_GIT_COMMIT_AUTHOR_EMAIL=${{ github.repository_owner }}@users.noreply.github.com" >> $GITHUB_ENV

      - name: Setup Node 20
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: |
            home/package-lock.json
            shared/package-lock.json

      - name: Install deps (root)
        run: npm install

      - name: Install deps (shared)
        working-directory: shared
        run: npm install

      - name: Install deps (home)
        working-directory: home
        run: npm install

      - name: Install Vercel CLI
        run: npm i -g vercel@latest

      - name: Set Vercel env target (preview/production)
        id: set_env
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            if [ "${{ inputs.target }}" = "production" ]; then
              echo "VERCEL_ENV=production" >> $GITHUB_ENV
            else
              echo "VERCEL_ENV=preview" >> $GITHUB_ENV
            fi
          else
            echo "VERCEL_ENV=${{ github.ref == 'refs/heads/main' && 'production' || 'preview' }}" >> $GITHUB_ENV
          fi

      - name: Link project (home)
        working-directory: home
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID_HOME }}
        run: vercel link --yes --project $VERCEL_PROJECT_ID --scope=$VERCEL_ORG_ID --token=$VERCEL_TOKEN

      - name: Vercel pull (env)
        working-directory: home
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID_HOME }}
        run: vercel pull --yes --environment=$VERCEL_ENV --token=$VERCEL_TOKEN

      - name: Build (home)
        working-directory: home
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID_HOME }}
        run: |
          if [ "$VERCEL_ENV" = "production" ]; then
            vercel build --prod --token=$VERCEL_TOKEN
          else
            vercel build --token=$VERCEL_TOKEN
          fi

      - name: Deploy (home) - preview
        if: github.ref != 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && inputs.target == 'preview')
        id: deploy_preview
        working-directory: home
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID_HOME }}
        run: |
          set -euo pipefail
          output=$(vercel deploy --prebuilt --yes --token=$VERCEL_TOKEN | tee deployment_home_preview.log)
          url=$(echo "$output" | grep -Eo 'https://[A-Za-z0-9.-]+\.vercel\.app' | head -n 1)
          if [ -z "$url" ]; then
            echo "Failed to parse preview deployment URL from Vercel output" >&2
            exit 1
          fi
          echo "url=$url" >> $GITHUB_OUTPUT

      - name: Deploy (home) - production
        if: github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && inputs.target == 'production')
        id: deploy_prod
        working-directory: home
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID_HOME }}
        run: |
          set -euo pipefail
          output=$(vercel deploy --prebuilt --prod --yes --token=$VERCEL_TOKEN | tee deployment_home.log)
          url=$(echo "$output" | grep -Eo 'https://[A-Za-z0-9.-]+\.vercel\.app' | head -n 1)
          if [ -z "$url" ]; then
            echo "Failed to parse deployment URL from Vercel output" >&2
            exit 1
          fi
          echo "url=$url" >> $GITHUB_OUTPUT

      - name: Set URL output
        id: set_url
        run: echo "url=${{ steps.deploy_preview.outputs.url || steps.deploy_prod.outputs.url }}" >> $GITHUB_OUTPUT

  deploy_login:
    name: Deploy Login
    runs-on: ubuntu-latest
    needs: deploy_home
    steps:
      - name: Checkout (with submodules)
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0

      - name: Force Vercel git author to trusted account
        run: |
          echo "VERCEL_GIT_COMMIT_AUTHOR_LOGIN=${{ github.repository_owner }}" >> $GITHUB_ENV
          echo "VERCEL_GIT_COMMIT_AUTHOR_NAME=${{ github.repository_owner }} (via GitHub Actions)" >> $GITHUB_ENV
          echo "VERCEL_GIT_COMMIT_AUTHOR_EMAIL=${{ github.repository_owner }}@users.noreply.github.com" >> $GITHUB_ENV

      - name: Setup Node 20
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: |
            login/package-lock.json
            shared/package-lock.json

      - name: Install deps (root)
        run: npm install

      - name: Install deps (shared)
        working-directory: shared
        run: npm install

      - name: Install deps (login)
        working-directory: login
        run: npm install

      - name: Install Vercel CLI
        run: npm i -g vercel@latest

      - name: Set Vercel env target (preview/production)
        id: set_env
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            if [ "${{ inputs.target }}" = "production" ]; then
              echo "VERCEL_ENV=production" >> $GITHUB_ENV
            else
              echo "VERCEL_ENV=preview" >> $GITHUB_ENV
            fi
          else
            echo "VERCEL_ENV=${{ github.ref == 'refs/heads/main' && 'production' || 'preview' }}" >> $GITHUB_ENV
          fi

      - name: Select HOME_URL for login
        run: |
          if [ "$VERCEL_ENV" = "production" ]; then
            # Use stable default domain for Home in production (set this secret to e.g. https://mfe-tech-challenge-cfqw.vercel.app)
            echo "HOME_URL=${{ secrets.PROD_HOME_URL }}" >> $GITHUB_ENV
          else
            # Use freshly deployed Home preview URL
            echo "HOME_URL=${{ needs.deploy_home.outputs.home_url }}" >> $GITHUB_ENV
          fi

      - name: Link project (login)
        working-directory: login
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID_LOGIN }}
        run: vercel link --yes --project $VERCEL_PROJECT_ID --scope=$VERCEL_ORG_ID --token=$VERCEL_TOKEN

      - name: Vercel pull (env)
        working-directory: login
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID_LOGIN }}
        run: vercel pull --yes --environment=$VERCEL_ENV --token=$VERCEL_TOKEN

      - name: Build (login)
        working-directory: login
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID_LOGIN }}
          NEXT_PUBLIC_HOME_URL: ${{ env.HOME_URL }}
        run: |
          if [ "$VERCEL_ENV" = "production" ]; then
            vercel build --prod --token=$VERCEL_TOKEN
          else
            vercel build --token=$VERCEL_TOKEN
          fi

      - name: Deploy (login) - preview
        if: github.ref != 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && inputs.target == 'preview')
        working-directory: login
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID_LOGIN }}
        run: vercel deploy --prebuilt --yes --token=$VERCEL_TOKEN

      - name: Deploy (login) - production
        if: github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && inputs.target == 'production')
        working-directory: login
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID_LOGIN }}
        run: vercel deploy --prebuilt --prod --yes --token=$VERCEL_TOKEN
